/*
  This file (c) Copyright 1998 - 2002 The MITRE Corporation
  
  This file is part of the Galaxy Communicator system. It is licensed
  under the conditions described in the file LICENSE in the root 
  directory of the Galaxy Communicator system.
*/

/* These Java bindings were originally produced by Intel Corp.,
   which has granted permission to the Communicator program to
   use and modify them. The preceding MITRE copyright refers to
   whatever changes the MITRE Corporation has made to the code. */

package galaxy.server.ui;

import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;

import java.awt.Component;
import java.awt.Font;
import java.awt.Color;
import java.awt.BorderLayout;
import java.awt.FlowLayout;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import java.net.URL;

import java.io.OutputStream;
import java.io.PrintStream;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.StringWriter;
import java.io.PrintWriter;

import javax.swing.JFrame;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenuItem;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JTabbedPane;
import javax.swing.JTextPane;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import javax.swing.BorderFactory;

import javax.swing.border.Border;
import javax.swing.border.BevelBorder;

import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;

import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.Document;
import javax.swing.text.StyleConstants;

import galaxy.server.MainServerListener;
import galaxy.server.ServerListener;
import galaxy.server.Server;
import galaxy.server.MainServer;
import galaxy.server.ServerArgParser;

import galaxy.util.ListenerLocationInfo;

public class ServerUI extends JFrame implements MainServerListener, ServerListener, LogDialogListener
{
    protected String mainServerClassName = "galaxy.server.MainServer";
    protected String serverClassName = null;
    protected int port = 1265;
    private int maxConns = 0;
    protected Component subclassComponent;
    MainServer mainServer;
    protected String serverName = null;

    boolean ui = false;
    boolean noOutput = false;
    boolean start = false;
    boolean validate = false;
    boolean requirePort = false;

    /** 
     * Collection of the Hub contact info information for the Hub(s) to which 
     * this UI's server should connect.
     */
    List hubContactInfoCollection = null;

    /** Flag that indicates if this UI's server acts as a client. */
    boolean actsAsHubClient = false;

    /** Flag that indicates if this UI's server acts as a listener. */
    boolean actsAsHubListener = false;

    /** Session id to be used by the server(s) associated with this UI. */
    String sessionId;

    Map server2TextPane = new HashMap();
    Map server2id = new HashMap();
    Map thread2Server = new HashMap();
    JTextPane jServerTextPane;
    JTabbedPane jTabbedPane;
    JMenuBar menuBar;
    JMenu     fileMenu;
    JMenuItem  logItem;
    JMenuItem  exitItem;
    JMenu     viewMenu;
    JMenuItem  removeItem;
    JCheckBoxMenuItem removeAsItem;

    ImageIcon runningIcon;
    ImageIcon stoppedIcon;

    Font serverFont;

    boolean removeAsServersFinish;

    LogDialog logDialog;
    PrintStream logPrintStream;
    String logFile = "server.log";
    boolean append = true;

    protected SimpleAttributeSet normalStyle, warningStyle, errorStyle, fatalErrorStyle;

    protected ServerArgParser argParser;

    public ServerUI(String args[])
    {
        init();
	String errorMsg = parseArgs(args);

	// This code is automatically generated by Visual Cafe when you add
	// components to the visual environment. It instantiates and initializes
	// the components. To modify the code, only use code syntax that matches
	// what Visual Cafe can generate, or Visual Cafe may be unable to back
	// parse your Java file into its visual environment.
	//{{INIT_CONTROLS
	getContentPane().setLayout(new BorderLayout(0,0));
	setVisible(false);
	setSize(622,600);
	setBackground(new Color(-3355444));
	mainPanel = new JPanel();
	mainPanel.setLayout(new BorderLayout(0,0));
	mainPanel.setBounds(0,0,818,498);
	mainPanel.setFont(new Font("Dialog", Font.PLAIN, 12));
	mainPanel.setForeground(new Color(0));
	mainPanel.setBackground(new Color(-3355444));
	getContentPane().add("North", mainPanel);
	jStatusPanel = new JPanel();
	jStatusPanel.setLayout(new BorderLayout(10,10));
	jStatusPanel.setBounds(0,0,818,35);
	jStatusPanel.setFont(new Font("Dialog", Font.PLAIN, 12));
	jStatusPanel.setForeground(new Color(0));
	jStatusPanel.setBackground(new Color(-3355444));
	mainPanel.add("North", jStatusPanel);
	loggingLabel = new JLabel();
	loggingLabel.setText("--");
	loggingLabel.setBounds(0,0,8,35);
	loggingLabel.setFont(new Font("Dialog", Font.BOLD, 12));
	loggingLabel.setForeground(new Color(-10066279));
	loggingLabel.setBackground(new Color(-3355444));
	jStatusPanel.add("West", loggingLabel);
	jPanel1 = new JPanel();
	jPanel1.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
	jPanel1.setBounds(745,0,73,35);
	jPanel1.setFont(new Font("Dialog", Font.PLAIN, 12));
	jPanel1.setForeground(new Color(0));
	jPanel1.setBackground(new Color(-3355444));
	jStatusPanel.add("East", jPanel1);
	jStartStopButton = new JButton();
	jStartStopButton.setText("Start");
	jStartStopButton.setActionCommand("Start");
	jStartStopButton.setBounds(5,5,63,25);
	jStartStopButton.setFont(new Font("Dialog", Font.BOLD, 12));
	jStartStopButton.setForeground(new Color(0));
	jStartStopButton.setBackground(new Color(-3355444));
	jPanel1.add(jStartStopButton);
	jClearButton = new JButton();
	jClearButton.setText("Clear Text");
	jClearButton.setActionCommand("Clear Text");
	jClearButton.setBounds(5,5,63,25);
	jClearButton.setFont(new Font("Dialog", Font.BOLD, 12));
	jClearButton.setForeground(new Color(0));
	jClearButton.setBackground(new Color(-3355444));
	jPanel1.add(jClearButton);
	//}}

	//{{INIT_MENUS
	//}}

	//{{REGISTER_LISTENERS
	SymWindow aSymWindow = new SymWindow();
	this.addWindowListener(aSymWindow);
	SymAction lSymAction = new SymAction();
	jStartStopButton.addActionListener(lSymAction);
	jClearButton.addActionListener(lSymAction);
	//}}


        serverFont = new Font("Monospaced", Font.PLAIN, 12);

        if (subclassComponent != null)
	    mainPanel.add("South", subclassComponent);

        initStyles();

        Action a = new Action();
        menuBar = new JMenuBar();
        setJMenuBar(menuBar);

	fileMenu = new JMenu("File");
	menuBar.add(fileMenu);

	logItem = new JMenuItem("Log...");
	logItem.addActionListener(a);
	fileMenu.add(logItem);

	exitItem = new JMenuItem("Exit");
	exitItem.addActionListener(a);
	fileMenu.add(exitItem);


	viewMenu = new JMenu("View");
	menuBar.add(viewMenu);
	removeItem = new JMenuItem("Remove finished servers");
	removeItem.addActionListener(a);
	viewMenu.add(removeItem);
	removeAsItem = new JCheckBoxMenuItem("Remove servers as they finish");
	removeAsItem.addActionListener(a);
	viewMenu.add(removeAsItem);

	jServerTextPane = newJTextPane();

	jTabbedPane = new JTabbedPane();

        Border b = BorderFactory.createBevelBorder(BevelBorder.RAISED);
        jStatusPanel.setBorder(b);

	getContentPane().add(jServerTextPane, "Center");

        Class localClass = getClass();

        while(!localClass.getName().equals("galaxy.server.ui.ServerUI"))
            localClass = localClass.getSuperclass();
        URL urlS = localClass.getResource("stopped.gif");
        stoppedIcon = new ImageIcon(urlS);
        URL urlG = localClass.getResource("running.gif");
        runningIcon = new ImageIcon(urlG);

        jTabbedPane.addChangeListener(new ChangeListener() {
		public void stateChanged(ChangeEvent e) {
		    tabbedPaneChange(e);
		}});


        updateLoggingLabel();
	initMainServer();

	if (ui && !noOutput)
	    setVisible(true);

        if (errorMsg != null)
            log(errorMsg, errorStyle, MainServer.ERROR_VERBOSITY_LEVEL);
        else {

            try {
                mainServer.init();
            } catch(Exception ex) {
                log("Unable to init " + mainServerClassName, fatalErrorStyle, 
		    MainServer.FATAL_VERBOSITY_LEVEL);
                log(exceptionToString(ex), fatalErrorStyle,
		    MainServer.FATAL_VERBOSITY_LEVEL);
                return;
            }
            if (start) {
                try {
                    mainServer.start();
                } catch(Exception ex2) {
                    log("Unable to start " + mainServerClassName, 
			fatalErrorStyle, MainServer.FATAL_VERBOSITY_LEVEL);
                    log(exceptionToString(ex2), fatalErrorStyle, 
			MainServer.FATAL_VERBOSITY_LEVEL);
                    return;
                }
            }
        }

        redirectStdout();
    }

    void redirectStdout()
    {
        class LogOutputStream extends OutputStream {
            public void write(byte b[]) throws IOException
            {
                write(b, 0, b.length);
            }
            public void write(byte b[], int off, int len) throws IOException
            {
                Server s = (Server)thread2Server.get(Thread.currentThread());
                if (s == null)
                    lognonl(new String(b, off, len));
                else
                    lognonl(s, new String(b, off, len));
            }

            public void write(int b) throws IOException
            {
                byte bs[] = new byte[1];
                bs[0] = (byte)b;
                write(bs);
            }
        }

	System.setOut(new PrintStream(new LogOutputStream()));
    }

    protected String parseArgs(String args[])
    {
	// Parse the command line arguments.
	argParser = new ServerArgParser(args);

	// Process the command line server listener port information.
	if(argParser.isArg("-port"))
	    actsAsHubListener = true;
	port = argParser.getIntegerArg("-port", port);	
	requirePort = argParser.isArg("-assert");


	// Check for information in the server locations file (if present).
	// This will override the -port and -contact_hub command line 
	// arguments.
	ListenerLocationInfo listenerInfo = argParser.getListenerLocationInfo(serverName);

	if(listenerInfo != null) {
	    if(listenerInfo.isServerListener()) {
		port = listenerInfo.getPort();

		// Ports specified in the server locations file are required.
		requirePort = true;

		actsAsHubListener = true;
	    }
	}

	ui = argParser.isArg("-ui");
	noOutput = argParser.isArg("-no_output");
	start = argParser.isArg("-start");
	logFile = argParser.getStringArg("-log", null);
	append = argParser.isArg("-append_log");
	validate = argParser.isArg("-validate");
	sessionId = argParser.getStringArg("-session_id", sessionId);
	if(argParser.isArg("-maxconns"))
	    maxConns = argParser.getIntegerArg("-maxconns", 1);
        mainServerClassName = argParser.getStringArg("-main_server_class", mainServerClassName);

	if(argParser.isArg("-verbosity"))
	    MainServer.setVerbosityLevel(argParser.getIntegerArg("-verbosity", MainServer.DEFAULT_VERBOSITY_LEVEL));

	if (!ui || noOutput)
	    start = true;

	if (logFile != null) {
	    try {
		FileOutputStream fos = new FileOutputStream(logFile, append);
                logPrintStream = new PrintStream(fos);
            } catch(Exception ex) {
                return "Error trying to open logfile, " +logFile + "\n" + ex.toString();
            }
        }

        return null;
    }

    void initStyles()
    {

        normalStyle = new SimpleAttributeSet();
        StyleConstants.setForeground(normalStyle, new Color(0, 0, 0));
        StyleConstants.setBold(normalStyle, false);
        StyleConstants.setFontFamily(normalStyle, "Monospaced");

        warningStyle = new SimpleAttributeSet();
        StyleConstants.setForeground(warningStyle, new Color(40, 40, 250));
        StyleConstants.setBold(warningStyle, false);
        StyleConstants.setFontFamily(warningStyle, "Monospaced");

        errorStyle = new SimpleAttributeSet();
        StyleConstants.setForeground(errorStyle, new Color(230, 0, 0));
        StyleConstants.setBold(errorStyle, false);
        StyleConstants.setFontFamily(errorStyle, "Monospaced");

        fatalErrorStyle = new SimpleAttributeSet();
        StyleConstants.setForeground(fatalErrorStyle, new Color(230, 0, 0));
        StyleConstants.setBold(fatalErrorStyle, true);
        StyleConstants.setFontFamily(fatalErrorStyle, "Monospaced");
    }


    /**
     * Called by the constructor, before parsing args or calling initMainServer().
     * Subclasses may override to set the default <code>port</code>,
     * <code>subclassComponent</code>,
     * <code>serverClassName</code>,
     * <code>mainServerClassName</code>.
     * <P>
     * subclassComponent is added to the user interface.  Its generally a Panel.
     * It allows subclasses to add custom UI components.
     */
    protected void init()
    {
    }

    void initMainServer()
    {
	setTitle(mainServerClassName);

	try {
	    log("Loading " + mainServerClassName + "...", MainServer.INITIALIZATION_DETAILS_VERBOSITY_LEVEL);
	    mainServer = (MainServer)Class.forName(mainServerClassName).newInstance();
	    mainServer.setName(serverName);
	} catch(Exception ex) {
	    log("initMainServer caught exception: " + ex.toString(),
		fatalErrorStyle, MainServer.FATAL_VERBOSITY_LEVEL);
	    return;
	}

	mainServer.setPort(port);
	if(requirePort)
	    mainServer.setRequirePort(true);

	// Set the session id for this UI's main server.
	mainServer.setSessionId(sessionId);

	mainServer.setMaxConnections(maxConns);

	// Set the Hub contact info collection for this UI's main server.
	hubContactInfoCollection = argParser.getHubContactInfoCollection();
	if(hubContactInfoCollection != null && 
	   hubContactInfoCollection.size() != 0) {
	    mainServer.setHubContactInfoCollection(hubContactInfoCollection);
	    actsAsHubClient = true;
	} else {
	    // If there are no Hubs to connect to, default to being a listener
	    actsAsHubListener = true;
	}

	mainServer.setActsAsHubListener(actsAsHubListener);
	mainServer.setActsAsHubClient(actsAsHubClient);

	if (serverClassName != null)
	    mainServer.setServerClassName(serverClassName);

	setTitle(mainServerClassName+" ["+mainServer.getServerClassName()+"]");

	mainServer.setValidate(validate);
	mainServer.addMainServerListener(this);
    }


    static public void main(String args[])
    {
	new ServerUI(args);
    }

    int serverCount;

    synchronized void addServer(Server server)
    {
        server.addServerListener(this);
        if (serverCount == 0) {
	    jTabbedPane.addTab("Main", runningIcon, new JScrollPane(jServerTextPane));
            getContentPane().add(jTabbedPane, "Center");
       	    invalidate();
	    validate();
        }
        JTextPane ta = newJTextPane();
        ta.setEditable(false);
	ta.setFont(serverFont);
        server2TextPane.put(server, ta);
        ++serverCount;

        jTabbedPane.addTab(String.valueOf(serverCount), runningIcon, new JScrollPane(ta));
        server2id.put(server, String.valueOf(serverCount));
        jTabbedPane.repaint();
    }

    // Used for addNotify check.
    boolean fComponentsAdjusted = false;

    //{{DECLARE_CONTROLS
    JPanel mainPanel;
    JPanel jStatusPanel;
    JLabel loggingLabel;
    JPanel jPanel1;
    JButton jStartStopButton;
    JButton jClearButton;
    //}}

    //{{DECLARE_MENUS
    //}}


    JTextPane newJTextPane()
    {
	DefaultStyledDocument doc = new DefaultStyledDocument();
	//jServerTextPane.setFont(serverFont);
	//jServerTextPane.setEditable(false);
	return new JTextPane(doc);
    }
    private class SymWindow extends WindowAdapter
    {
	public void windowClosing(WindowEvent event)
	{
	    Object object = event.getSource();
	    if (object == ServerUI.this)
		JFrame1_WindowClosing(event);
	}
    }

    void JFrame1_WindowClosing(WindowEvent event)
    {
	setVisible(false); // hide the Frame
	dispose();	     // free the system resources
	if (logPrintStream != null)
	    logPrintStream.close();
	System.exit(0);    // close the application
    }

    //--- MainServerListener interface
    //

    public void mainServerStarted(MainServer mainServer)
    {
	/*
	if(actsAsHubClient && actsAsHubListener) {
	    log("Main server started as client and listener on port " +
		mainServer.getPort(), 
		MainServer.THREAD_ACTIVITY_VERBOSITY_LEVEL);
 	} else if(actsAsHubClient && !actsAsHubListener) {
	    log("Main server started as client", 
		MainServer.THREAD_ACTIVITY_VERBOSITY_LEVEL);
	} else {
	    log("Main server started as listener on port " + 
		mainServer.getPort(), 
		MainServer.THREAD_ACTIVITY_VERBOSITY_LEVEL);
	}
	*/

	Runnable runnable = new Runnable() {
	    public void run() {updateTabAndButton(0);}
	};
	invokeLater(runnable);
	
	if(actsAsHubListener) {
	    final String title = new String(mainServerClassName + ", port " 
					    + mainServer.getPort() +
					    " [" +
					    mainServer.getServerClassName() +
					    "]");
	    runnable = new Runnable() {
		public void run() {setTitle(title);}
	    };
	    invokeLater(runnable);
	}
    }

    public void mainServerStopped(MainServer mainServer)
    {
	Runnable runnable = new Runnable() {
	    public void run() {updateTabAndButton(0);}
	};
	invokeLater(runnable);
    }

    public void mainServerMessage(MainServer mainServer, String message)
    {
	log(message, normalStyle);
    }

    public void mainServerWarningMessage(MainServer mainServer, String message)
    {
	log("WARNING: " + message, warningStyle, MainServer.WARNING_VERBOSITY_LEVEL);
    }

    public void mainServerErrorMessage(MainServer mainServer, String message)
    {
	log("ERROR: " + message, errorStyle, MainServer.ERROR_VERBOSITY_LEVEL);
    }

    public void mainServerErrorMessage(MainServer mainServer, String message, Exception ex)
    {
	mainServerErrorMessage(mainServer, message);
	if(ex != null && MainServer.getVerbosityLevel() >= MainServer.ERROR_DETAILS_VERBOSITY_LEVEL)
	    ex.printStackTrace();
    }

    public void mainServerFatalErrorMessage(MainServer mainServer, String message)
    {
	log("FATAL: " + message, fatalErrorStyle, MainServer.FATAL_VERBOSITY_LEVEL);
    }

    public void mainServerFatalErrorMessage(MainServer mainServer, String message, Exception ex)
    {
	mainServerFatalErrorMessage(mainServer, message);
	if(ex != null && MainServer.getVerbosityLevel() >= MainServer.FATAL_DETAILS_VERBOSITY_LEVEL)
	    ex.printStackTrace();
    }

    /**
     * Sends an asynchronous request to the Swing event thread. Use this
     * if the calling thread does not need to wait for a response before
     * continuing.
     *
     * @param doWorkRunnable the code that the calling thread is requesting
     *                       that the Swing event thread runs
     */
    private void invokeLater(Runnable doWorkRunnable)
    {
        try {
            SwingUtilities.invokeLater(doWorkRunnable);
        } catch(Exception ex) {
            log("Got exception during call to SwingUtilities.invokeLater: " 
		+ ex.toString(), MainServer.ERROR_VERBOSITY_LEVEL);
        }
    }

    /**
     * Sends a synchronous request to the Swing event thread. Use this
     * if the calling thread needs to wait for a response before
     * continuing.
     *
     * @param doWorkRunnable the code that the calling thread is requesting
     *                       that the Swing event thread runs
     */
    private void invokeAndWait(Runnable doWorkRunnable)
    {
        try {
            SwingUtilities.invokeAndWait(doWorkRunnable);
        } catch(Exception ex) {
            log("Got exception during call to SwingUtilities.invokeAndWait: " 
		+ ex.toString(), MainServer.ERROR_VERBOSITY_LEVEL);
        }
    }

    private void processMainServerNewServer(galaxy.server.Server server)
    { 
	addServer(server);
	//log("Started server " + getServerID(server), MainServer.THREAD_ACTIVITY_VERBOSITY_LEVEL);
    }

    //
    // Assuming that this is never called from within the Swing thread.
    //
    public void mainServerNewServer(MainServer mainServer, Server server)
    { 
	final Server _server = server;
	Runnable runnable = new Runnable() {
	    public void run() {processMainServerNewServer(_server);}
	};

	// Need to use this instead of invokeLater to ensure server threads don't try to interact with the
	// GUI (e.g., via serverStarted) before this is done.
	invokeAndWait(runnable);
    } 

    //
    //--- MainServerListener interface

    //--- ServerListener interface
    //

    private void processServerStarted(int tab)
    {
	updateTabAndButton(tab);
    }

    public void serverStarted(Server server)
    {
	//log(server, "Server started", MainServer.THREAD_ACTIVITY_VERBOSITY_LEVEL);
	final int t = findServerTab(server);
	thread2Server.put(Thread.currentThread(), server);

	Runnable runnable = new Runnable() {
		public void run() {processServerStarted(t);}
	    };
	invokeLater(runnable);
    }

    private void processServerStopped(int tab, Server server)
    {
	updateTabAndButton(tab);
	jTabbedPane.repaint();
	if (removeAsServersFinish)
	    removeServer(server);
    }

    public void serverStopped(Server server)
    {
	//log(server, "Server stopped", MainServer.THREAD_ACTIVITY_VERBOSITY_LEVEL);
	final int t = findServerTab(server);
	final Server _server = server;

	Runnable runnable = new Runnable() {
		public void run() {processServerStopped(t, _server);}
	    };
	invokeLater(runnable);
    }

    public void serverMessage(Server server, String message)
    {
        log(server, message, normalStyle);
    }

    public void serverWarningMessage(Server server, String message)
    {
        log(server, "WARNING: " + message, warningStyle, 
	    MainServer.WARNING_VERBOSITY_LEVEL);
    }

    public void serverErrorMessage(Server server, String message)
    {
        log(server, "ERROR: " + message, errorStyle, 
	    MainServer.ERROR_VERBOSITY_LEVEL);
    }

    public void serverErrorMessage(Server server, String message, Exception ex)
    {
        serverErrorMessage(server, message);
	if(ex != null && MainServer.getVerbosityLevel() >= MainServer.ERROR_DETAILS_VERBOSITY_LEVEL)
	    ex.printStackTrace();
    }

    public void serverFatalErrorMessage(Server server, String message)
    {
        log(server, "FATAL: " + message, fatalErrorStyle, 
	    MainServer.FATAL_VERBOSITY_LEVEL);
    }

    public void serverFatalErrorMessage(Server server, String message, Exception ex)
    {
        serverFatalErrorMessage(server, message);
	if(ex != null && MainServer.getVerbosityLevel() >= MainServer.FATAL_DETAILS_VERBOSITY_LEVEL)
	    ex.printStackTrace();
    }

    //
    //--- ServerListener interface

    //--- LogDialogListener interface
    //


    public void logDialogOptionsSet(String logFile, boolean append, PrintStream logPrintStream)
    {
        this.logFile = logFile;
        this.append = append;
        this.logPrintStream = logPrintStream;
        updateLoggingLabel();
    }


    public void logDialogClosed()
    {
        logDialog = null;
    }

    //
    //--- LogDialogListener interface


    String exceptionToString(Exception ex)
    {
	StringWriter sw = new StringWriter();
	PrintWriter pw = new PrintWriter(sw);
	ex.printStackTrace(pw);
	return sw.toString();
    }


    void updateLoggingLabel()
    {
        if (logPrintStream == null) {
            loggingLabel.setText("Not logging to a file");
        } else {
            loggingLabel.setText("Logging to "+logFile);
        }
        loggingLabel.invalidate();
        validate();
    }

    void updateTabAndButton(int t)
    {
	updateTab(t);
	updateButton(t);
    }

    void updateButton(int t)
    {
        String label ="";
        boolean enable = true;

        if (t != jTabbedPane.getSelectedIndex() && jTabbedPane.getSelectedIndex() >=0 )
            return;

        if (t <= 0) {
            if (mainServer != null) {
                label = mainServer.isRunning() ? "Stop main" : "Start main";
	    }
        } else {
            Server s = findServer(t);
            if (s != null) {
                label = "Kill "+getServerID(findServer(t));
                enable = s.isRunning();
            }
        }

        jStartStopButton.setEnabled(enable);
        jStartStopButton.setText(label);
        invalidate();
        validate();
    }

    void updateTab(int t)
    {
	if (t == 0) {
	    if (jTabbedPane.getTabCount() > 0)
		jTabbedPane.setIconAt(0, mainServer.isRunning() ? runningIcon : stoppedIcon);
	} else {
    	    Server s = findServer(t);
       	    jTabbedPane.setIconAt(t, s.isRunning() ? runningIcon : stoppedIcon);
       	}
	jTabbedPane.repaint();
    }

    JTextPane findTextPane(Server server)
    {
	return (JTextPane)server2TextPane.get(server);
    }

    int findServerTab(Server server)
    {
	Component c = (Component)server2TextPane.get(server);
	for(int t=0; t<jTabbedPane.getTabCount(); ++t) {
	    JScrollPane sp = (JScrollPane)(jTabbedPane.getComponentAt(t)); 
	    if (c == sp.getViewport().getView())
		return t; 
	}
	return -1;
    }

    Server findServer(Component c)
    {
	if (c instanceof JScrollPane) {
    	    JScrollPane sp = (JScrollPane)c;
    	    c = sp.getViewport().getView();
    	}

	Set keys = server2TextPane.keySet();
	Iterator servers = keys.iterator();
	while(servers.hasNext()) {
	    Server server = (Server) servers.next();
	    if (server2TextPane.get(server) == c)
		return server;
	}
	return null;
    }

    Server findServer(int t)
    {
	return findServer(jTabbedPane.getComponentAt(t));
    }

    String getServerID(Server server)
    {
	return (String)server2id.get(server);
    }

    protected synchronized void log(String msg)
    {
        log(msg, normalStyle);
    }

    protected synchronized void log(String msg, AttributeSet s)
    {
        lognonl(msg, s);
    } 

    protected synchronized void log(String msg, int level)
    {
        log(msg, normalStyle, level);
    }

    protected synchronized void log(String msg, AttributeSet s, int level)
    {
	if(MainServer.getVerbosityLevel() >= level)
	    lognonl(msg, s);
    }

    protected synchronized void lognonl(String msg)
    {
        lognonl(msg, normalStyle);
    }

    protected synchronized void lognonl(String msg, AttributeSet s)
    {
	if(msg.equals("\n")) return;

	if(ui || noOutput) {
	    
	    final DefaultStyledDocument doc = (DefaultStyledDocument)jServerTextPane.getDocument();
	    final AttributeSet fs = s;
	    final String fmsg = new String(msg + "\n");
	    SwingUtilities.invokeLater( new Runnable () {
		    public void run() {
			try {
			    doc.insertString(doc.getLength(), fmsg, fs);
			} catch(Exception ex) {
			}
		    }
		});
	} else {
	    System.err.println(msg);
	}
	fileLog(msg);
    }

    protected synchronized void log(Server server, String msg)
    {
        log(server, msg, normalStyle);
    }

    protected synchronized void log(Server server, String msg, AttributeSet s)
    {
        lognonl(server, msg, s);
    }

    protected synchronized void log(Server server, String msg, int level)
    {
        log(server, msg, normalStyle, level);
    }

    protected synchronized void log(Server server, String msg, AttributeSet s, int level)
    {
	if(MainServer.getVerbosityLevel() >= level)
	    lognonl(server, msg, s);
    }

    protected synchronized void lognonl(Server server, String msg)
    {
        lognonl(server, msg, normalStyle);
    }

    protected synchronized void lognonl(Server server, String msg, AttributeSet s)
    {
	if(msg.equals("\n")) return;
	
	if(ui || noOutput) {
	    JTextPane ta = findTextPane(server);
	    final Document doc = ta.getDocument();
	    final AttributeSet fs = s;
	    final String fmsg = new String(msg + "\n");
	    
	    SwingUtilities.invokeLater(new Runnable() {
		    public void run() {
			try {
			    doc.insertString(doc.getLength(), fmsg, fs);
			} catch(Exception ex) {
			}
		    }
		});
	} else {
	    //System.err.println(getServerID(server)+": "+msg);
	    System.err.println(msg);
	}
	fileLog(getServerID(server)+": "+msg);
    }
    
    void fileLog(String msg)
    {
        if (logPrintStream != null) {
            logPrintStream.println(msg);
        }
    }

    private class Action implements ActionListener
    {
	public void actionPerformed(ActionEvent event)
	{
	    Object object = event.getSource();
	    if (object == exitItem)
		System.exit(0);
	    else if (object == logItem)
		startLogDialog();
	    else if (object == removeItem)
                removeDeadServers();
	    else if (object == removeAsItem)
                removeAsServersFinish = removeAsItem.getState();
	}
    }

    private class SymAction implements ActionListener
    {
	public void actionPerformed(ActionEvent event)
	{

	    Object object = event.getSource();
	    if (object == jStartStopButton)
		jStartStopButton_actionPerformed(event);
	    else if (object == jClearButton)
		jClearButton_actionPerformed(event);
	}
    }

    void startLogDialog()
    {
        if (logDialog == null) {
            logDialog = new LogDialog();
            logDialog.setLogFile(logFile);
            logDialog.setAppend(append);
            logDialog.setLogging(logPrintStream != null);
            logDialog.addLogDialogListener(this);
            logDialog.setVisible(true);
        }
    }

    synchronized void removeDeadServers()
    {
        jTabbedPane.setSelectedIndex(0); //JFC Bug workaround.

	Set keys = server2TextPane.keySet();
	Iterator servers = keys.iterator();
	List removeList = new ArrayList();
	while(servers.hasNext()) {
	    Server server = (Server) servers.next();
	    if(!server.isRunning())
		removeList.add(server);
	}

	int removeCount = removeList.size();
	for(int idx=0; idx<removeCount; ++idx) {
	    removeServer((Server) removeList.get(idx));
	}

        updateButton(jTabbedPane.getSelectedIndex());
    }

    synchronized void removeServer(Server s)
    {
        Component c = (Component)server2TextPane.get(s);
        server2TextPane.remove(s);
        server2id.remove(s);
        jTabbedPane.remove(c.getParent().getParent());
        repaint();
    }

    void tabbedPaneChange(ChangeEvent e)
    {
        updateTabAndButton(jTabbedPane.getSelectedIndex());
    }

    void jStartStopButton_actionPerformed(ActionEvent event)
    {
	Component c;
	if (jTabbedPane.getParent() == null) {
	    // Tabbed pane not displayed.  Only main text pane is shown.
	    c = jServerTextPane;
	} else {
    	    c = ((JScrollPane)jTabbedPane.getSelectedComponent()).getViewport().getView();
        }
	if (c == null)
	    return;

	if (c == jServerTextPane && mainServer != null) {
	    if (mainServer.isRunning()) {
    	        mainServer.stop();
            } else {
		mainServer.start();
    	    }
    	} else {
    	    Server s = findServer(c);
    	    if (s != null)
    	        s.stop();
    	}
    }

    void jClearButton_actionPerformed(ActionEvent event)
    {
	Component c;
	if (jTabbedPane.getParent() == null) {
	    // Tabbed pane not displayed.  Only main text pane is shown.
	    c = jServerTextPane;
	} else {
    	    c = ((JScrollPane)jTabbedPane.getSelectedComponent()).getViewport().getView();
        }

	if (c == null)
	    return;

	if (c == jServerTextPane) {
	    ((JTextPane)c).setText("");
    	} else {
    	    Server s = findServer(c);
    	    if (s != null) {
		JTextPane textPane = findTextPane(s);
		if(textPane != null)
		    textPane.setText("");
	    }
    	}
    }

}
